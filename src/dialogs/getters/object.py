from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.widgets.kbd import Button, Select

from src.database.requests.object import db_get_object, db_delete_object, db_update_object
from src.database.requests.user import db_get_user
from src.dialogs.dialogs_states import CreateObject, UserDialog
from src.utils.media_group_creator import create_media_group


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
async def my_objects_getter(dialog_manager: DialogManager, **kwargs):
    telegram_id = dialog_manager.event.from_user.id
    object_list = await db_get_object(telegram_id=telegram_id)

    # –ï—Å–ª–∏ —É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤
    if not object_list:
        return {'my_object_list': [['–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤', 1]]}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    my_object_list = []

    for obj in object_list:
        id = obj['id']
        status = obj['status']
        generate_id = obj['generate_id']
        country = obj['country']
        my_object_list.append([f'{status} | ID: {generate_id} | {country}', str(id)])

    return {'my_object_list': my_object_list}


# –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
async def start_create_object(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    # –°–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    user_dict = await db_get_user(telegram_id=callback.from_user.id)
    obj_max = int(user_dict['obj_limit'])
    obj_len = user_dict['obj_list_len']

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à—ë–ª –ø–æ –ª–∏–º–∏—Ç–∞–º
    if obj_len >= obj_max:
        await callback.answer('–í–∞—à –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!')
        return

    await dialog_manager.start(CreateObject.get_country)


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
async def open_my_object(
        callback: CallbackQuery,
        widget: Select,
        dialog_manager: DialogManager,
        item_id: str
):
    dialog_manager.dialog_data['open_object_id'] = int(item_id) # id –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    object_id = int(item_id)
    object_data = await db_get_object(object_id=object_id)
    object_data = object_data[0]
    chat_id = dialog_manager.event.message.chat.id

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã
    media_group = await create_media_group(dict_data=object_data)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã
    await dialog_manager.event.bot.send_media_group(
        chat_id=chat_id,
        media=media_group
    )

    # –ß—Ç–æ–±—ã –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å —Ä–∞–Ω—å—à–µ —á–µ–º —Å–º—Å –æ—Ç –±–æ—Ç–∞
    dialog_manager.show_mode = ShowMode.DELETE_AND_SEND

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if object_data['status'] == '‚úÖ':
        await dialog_manager.switch_to(UserDialog.open_my_object_confirmed)
    elif object_data['status'] == 'üîÑ':
        await dialog_manager.switch_to(UserDialog.open_my_object_moderated)
    else:
        await dialog_manager.switch_to(UserDialog.open_my_object_deleted)


# –£–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
async def delete_my_object(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager
):
    object_id = dialog_manager.dialog_data.get('open_object_id')

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ '–£–¥–∞–ª—ë–Ω'
    new_object_data = {'status': '‚ùå'}
    await db_update_object(object_id=object_id, object_data=new_object_data)

    await dialog_manager.event.answer('–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
    await dialog_manager.back()


# –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç edit_menu


# Getter, —Å–æ–æ–±—â–∞—é—â–∏–π, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ edit_menu –∏–ª–∏ –Ω–µ—Ç
async def object_confirmed_getter(dialog_manager: DialogManager, **kwargs):
    is_edit_menu_open = dialog_manager.dialog_data.get('is_edit_menu_open')
    return {'edit_menu_open': is_edit_menu_open}