from datetime import date
from sqlalchemy import select

from src.database.requests.user import db_get_user
from src.database.run_db import async_session
from src.database.models import Object, User, Country


# –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
async def db_new_object(
        object_data: dict,
        user_tg_id: int
) -> bool or int:
    async with async_session() as session:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = await db_get_user(telegram_id=user_tg_id)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photo_list = object_data['create_object_state_data_photos']
        photo_str = ", ".join(photo_list)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        new_object = Object(
            status="üîÑ",
            generate_id=object_data['create_object_state_data_generate_id'],
            obj_type=object_data['create_object_state_data_type'],
            country_thread_id=object_data['create_object_state_data_country_thread_id'],
            address=object_data['create_object_state_data_address'],
            conditions=object_data['create_object_state_data_conditions'],
            description=object_data['create_object_state_data_description'],
            contacts=object_data['create_object_state_data_contacts'],
            photos=photo_str,
            payment_date=date.today(),
            owner_id=user["id"]
        )

        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if object_data.get('payment_date_no_limit', False):
            new_object.payment_date = None

        # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –ë–î
        try:
            session.add(new_object)
            await session.commit()
            return True
        except Exception as e:
            print(f'–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}')
            return False


# –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
async def db_get_object(
        object_id: int = None,
        country_thread_id: int = None,
        country_name: str = None,
        telegram_id: int = None,
        status: str = None
) -> list[dict]:
    """
    .

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - object_id (int, optional): ID –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å —ç—Ç–∏–º ID.
    - country_name (str, optional): –ò–º—è —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–æ–π.
    - telegram_id (int, optional): ID Telegram –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —ç—Ç–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É.
    - status (str, optional): –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    """
    async with async_session() as session:
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Object –∏ Country
        query = select(Object, Country.name, Country.id, Country.thread_id).join(Country)

        if telegram_id is not None:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
            user_query = select(User.id).where(User.telegram_id == telegram_id)
            user_result = await session.execute(user_query)
            user_id = user_result.scalar()

            if user_id is not None:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ owner_id –∏ —Å—Ç–∞—Ç—É—Å—É
                query = query.where(Object.owner_id == user_id).order_by(Object.status)

        if object_id is not None:
            query = query.where(Object.id == object_id)
        elif country_name is not None:
            query = query.where(Country.name == country_name)
        elif country_thread_id is not None:  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ country_id, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
            query = query.where(Object.country_thread_id == country_thread_id)

        if status is not None:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å—Ç–∞—Ç—É—Å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
            query = query.where(Object.status == status)

        result = await session.execute(query)
        objects = result.all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        objects_list = []
        for obj, country_name, country_id, country_thread_id in objects:
            objects_list.append({
                "id": obj.id,
                "generate_id": obj.generate_id,
                "status": obj.status,
                "obj_type": obj.obj_type,
                "country_id": country_id,
                "country": country_name,
                "country_thread_id": country_thread_id,
                "address": obj.address,
                "conditions": obj.conditions,
                "description": obj.description,
                "contacts": obj.contacts,
                "photos": obj.photos,
                "message_ids": obj.message_ids,
                "delete_reason": obj.delete_reason,
                "payment_date": obj.payment_date,
                "owner_id": obj.owner_id,
            })

        return objects_list


# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
async def db_delete_object(object_id: int):
    async with async_session() as session:
        obj = await session.execute(
            select(Object).where(Object.id == object_id)
        )
        obj = obj.scalar_one_or_none()

        if obj is None:
            return

        await session.delete(obj)
        await session.commit()


# –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
async def db_update_object(object_id: int, object_data: dict) -> bool:
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –µ–≥–æ ID
        result = await session.execute(
            select(Object).where(Object.id == object_id)
        )
        obj = result.scalars().first()

        if not obj:
            print(f'–û–±—ä–µ–∫—Ç —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
            return False

        key_list = ['status', 'obj_type', 'country_thread_id', 'address', 'conditions', 'description', 'contacts', 'photos',
                    'delete_reason', 'message_ids']

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞
        for key, value in object_data.items():
            if key in key_list:
                if key == 'photos':
                    obj.photos = ", ".join(value) if isinstance(value, list) else value
                else:
                    setattr(obj, key, value)

        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        try:
            await session.commit()
            return True
        except Exception as e:
            print(f'–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}')
            return False