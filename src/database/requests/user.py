from sqlalchemy import select, func

from src.database.run_db import async_session
from src.database.models import User, Object


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def db_new_user(
    telegram_id: int,
    full_name: str,
    username: str
) -> bool:
    async with async_session() as session:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = user.scalar_one_or_none()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        if user is None:
            new_user = User(
                telegram_id=telegram_id,
                full_name=full_name,
                username=username
            )
            session.add(new_user)
            await session.commit()
            return True

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user.full_name != full_name or user.username != username:
            user.full_name = full_name
            user.username = username

            await session.commit()

        return False


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def db_get_user(
        telegram_id: int = None,
        object_id: int = None,
        user_id: int = None
) -> dict | list | None:
    async with async_session() as session:
        user = None

        if telegram_id is not None:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = user.scalar_one_or_none()

        elif object_id is not None:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ object_id –∏ –∑–∞—Ç–µ–º –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            object_result = await session.execute(
                select(Object).where(Object.id == object_id)
            )
            obj = object_result.scalar_one_or_none()

            if obj is not None:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ owner_id –æ–±—ä–µ–∫—Ç–∞
                user = await session.execute(
                    select(User).where(User.id == obj.owner_id)
                )
                user = user.scalar_one_or_none()

        elif user_id is not None:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
            user = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = user.scalar_one_or_none()

        else :
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
            user_results = await session.execute(select(User))
            users = user_results.scalars().all()
            users_list = []
            for user in users:
                users_list.append({
                    "id": user.id,
                    "telegram_id": user.telegram_id,
                    "full_name": user.full_name,
                    "username": user.username,
                    "status": user.status,
                    "object_limit": user.object_limit,
                    "balance": user.balance,
                    "recurring_payments": user.recurring_payments
                })

            user = users_list
            return user

        if user is None:
            return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ–±—ä–µ–∫—Ç–æ–≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        objects = await session.execute(
            select(Object).where(Object.owner_id == user.id)
        )
        obj_list = [obj.id for obj in objects.scalars()]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "üîÑ" –∏ "‚úÖ"
        filtered_objects = await session.execute(
            select(Object).where(Object.owner_id == user.id, Object.status.in_(["üîÑ", "‚úÖ"]))
        )
        filtered_obj_list_len = len([obj.id for obj in filtered_objects.scalars()])

        # –ü–æ–¥—Å—á–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏ –ø–ª–∞—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        paid_objects_count = await session.execute(
            select(func.count(Object.id)).where(Object.owner_id == user.id, Object.payment_date != None)
        )
        free_objects_count = await session.execute(
            select(func.count(Object.id)).where(Object.owner_id == user.id, Object.payment_date == None,
                                                Object.status.in_(["üîÑ", "‚úÖ"]))
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
        user_dict = {
            "id": str(user.id),
            "telegram_id": user.telegram_id,
            "full_name": user.full_name,
            "username": user.username,
            "status": user.status,
            "obj_limit": str(user.object_limit),
            "obj_list": obj_list,
            "obj_list_len": filtered_obj_list_len,
            "paid_objects_count": paid_objects_count.scalar(),
            "free_objects_count": free_objects_count.scalar(),
            "balance": user.balance,
            "recurring_payments": user.recurring_payments
        }

        return user_dict


# –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def db_update_user(
        user_id: int = None,
        telegram_id: int = None,
        status: str = None,
        object_limit: int = None,
        plus_balance: int = None,
        recurring_payments: bool = None
):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
        if user_id is not None:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()

        # –ü–æ–ª—É—á–∞–µ–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        if telegram_id is not None:
            result = await session.execute(select(User).where(User.telegram_id == telegram_id))
            user = result.scalar_one_or_none()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if status is not None:
            user.status = status
        if object_limit is not None:
            user.object_limit = object_limit
        if plus_balance is not None:
            user.balance += plus_balance
        if recurring_payments is not None:
            user.recurring_payments = recurring_payments

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.add(user)
        await session.commit()


# –ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram username
async def find_user_by_username(username: str) -> int:
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()

        if user is not None:
            return user.id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω