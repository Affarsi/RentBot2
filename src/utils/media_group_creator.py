from typing import List

from aiogram.utils.media_group import MediaGroupBuilder
from aiogram_dialog import DialogManager

from config import Config
from src.database.requests.object import db_get_object


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
async def create_description_for_obj(
        dict_data: dict=None,
        state_data: dict=None,
        edit_data: dict=None
):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º edit_data, –∑–∞—Ç–µ–º state_data, –∑–∞—Ç–µ–º dict_data.
    def get_priority_value(key, default_value):
        edit_key = f'edit_object_data_{key}'
        state_key = f'create_object_state_data_{key}'

        if edit_data and edit_key in edit_data:
            return edit_data[edit_key]
        if state_data and state_key in state_data:
            return state_data[state_key]
        return default_value

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dict_data –Ω–µ None, –µ—Å–ª–∏ –¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    dict_data = dict_data or {}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞
    obj_type = get_priority_value('type', dict_data.get('obj_type'))
    country = get_priority_value('country_name', dict_data.get('country'))
    address = get_priority_value('address', dict_data.get('address'))
    conditions = get_priority_value('conditions', dict_data.get('conditions'))
    description = get_priority_value('description', dict_data.get('description'))
    contacts = get_priority_value('contacts', dict_data.get('contacts'))
    generate_id = get_priority_value('generate_id', dict_data.get('generate_id'))

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    caption = (f"<b>üè¢ {obj_type} (ID{generate_id})</b>\n"
               f"<b>üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
               f"{country}, {address}\n"
               f"üí∏<b> –¶–µ–Ω–∞ –∏ —É—Å–ª–æ–≤–∏—è:</b>\n"
               f"{conditions}\n"
               f"<b>üõã –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
               f"{description}\n\n"
               f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
               f"{contacts}")

    return caption


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä–µ–∫—Ç–µ
async def create_media_group(
        dict_data: dict = None,
        state_data: dict = None,
        photo_list: List[str] = None,
        edit_data: dict = None
):
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    caption = await create_description_for_obj(dict_data, state_data, edit_data)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã
    media_group = MediaGroupBuilder(caption=caption)

    # –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    if photo_list is None:
        if edit_data is None or 'edit_object_data_photos' not in edit_data:
            photo_list = dict_data['photos']
            photo_list = photo_list.split(', ')
        else:
            photo_list = edit_data['edit_object_data_photos']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–µ
    for photo in photo_list:
        media_group.add_photo(media=photo)

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
    media_group = media_group.build()
    return media_group


# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã
async def send_media_group(
        dialog_manager: DialogManager,
        object_id: int,
        chat_id: int | str,
        send_to_chat: bool=False
) -> dict:
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    object_data = await db_get_object(object_id=object_id)
    object_data = object_data[0]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ message_thread_id
    if send_to_chat:
        message_thread_id = object_data.get('country_thread_id')
    else:
        message_thread_id = None

    # –°–æ–∑–¥–∞–Ω–∏–µ media_group
    media_group = await create_media_group(dict_data=object_data)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ media_group
    result = await dialog_manager.event.bot.send_media_group(
        chat_id=chat_id,
        message_thread_id=message_thread_id,
        media=media_group,
    )

    if send_to_chat:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç—ã!
        old_message_ids = object_data.get('message_ids')
        if old_message_ids:
            try:    # —É–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await dialog_manager.event.bot.delete_messages(Config.chat, old_message_ids)
            except:
                try:    # –µ—Å–ª–∏ —Ç–∞–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await dialog_manager.event.bot.delete_message(Config.chat, old_message_ids)
                except:    # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–∞ –æ—à–∏–±–∫–∞
                    print('–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–ª –∏–ª–∏ –∏–∑–º–µ–Ω—è–ª –æ–±—ä–µ–∫—Ç')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_ids
        message_ids = []
        for msg in result:
            message_ids.append(str(msg.message_id))
        message_ids_str = ', '.join(message_ids)
        object_data['message_ids'] = message_ids_str

    return object_data