import random
from typing import List

from aiogram.utils.media_group import MediaGroupBuilder


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
async def create_description_for_obj(
        dict_data: dict=None,
        state_data: dict=None,
        edit_data: dict=None
):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º edit_data, –∑–∞—Ç–µ–º state_data, –∑–∞—Ç–µ–º dict_data.
    def get_priority_value(key, default_value):
        edit_key = f'edit_object_data_{key}'
        state_key = f'state_object_data_{key}'

        if edit_data and edit_key in edit_data:
            return edit_data[edit_key]
        if state_data and state_key in state_data:
            return state_data[state_key]
        return default_value

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞
    obj_type = get_priority_value('type', dict_data.get('obj_type'))
    country = get_priority_value('country_name', dict_data.get('country'))
    address = get_priority_value('address', dict_data.get('address'))
    conditions = get_priority_value('conditions', dict_data.get('conditions'))
    description = get_priority_value('description', dict_data.get('description'))
    contacts = get_priority_value('contacts', dict_data.get('contacts'))
    generate_id = get_priority_value('generate_id', dict_data.get('generate_id'))

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    caption = (f"<b>üè¢ {obj_type} (ID{generate_id})</b>\n"
               f"<b>üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
               f"{country}, {address}\n"
               f"üí∏<b> –¶–µ–Ω–∞ –∏ —É—Å–ª–æ–≤–∏—è:</b>\n"
               f"{conditions}\n"
               f"<b>üõã –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
               f"{description}\n\n"
               f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
               f"{contacts}")

    return caption


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã c –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä–µ–∫—Ç–µ
async def create_media_group(
        dict_data: dict=None,
        state_data: dict=None,
        photo_list: List[str]=None,
        edit_data: dict=None
):
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    caption = await create_description_for_obj(dict_data, state_data, edit_data)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã
    media_group = MediaGroupBuilder(caption=caption)

    # –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    if photo_list is None:
        photo_list = dict_data['photos']
        photo_list = photo_list.split(', ')

    for photo in photo_list:
        media_group.add_photo(media=photo)

    media_group = media_group.build()
    return media_group